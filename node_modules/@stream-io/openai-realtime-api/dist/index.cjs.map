{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { type RealtimeAPI, RealtimeClient } from '@openai/realtime-api-beta';\nimport type { OutgoingMessage } from 'node:http';\nimport { WebSocket } from 'ws';\n\nexport type RealtimeAPIModel = \"gpt-4o-realtime-preview\" | \"gpt-4o-realtime-preview-2024-10-01\" | (string & {});\ntype RealtimeProxyAPI = RealtimeAPI & {\n  streamToken: string,\n  model?: RealtimeAPIModel,\n};\n\nexport type { RealtimeClient } from \"@openai/realtime-api-beta\";\n\n/**\n * Creates OpenAI Realtime API client. The client is compatible with OpenAI's\n * reference implementation: https://github.com/openai/openai-realtime-api-beta\n */\nexport function createRealtimeClient(options: {\n  baseUrl: string;\n  call: { type: string; id: string };\n  streamApiKey: string;\n  streamUserToken: string;\n  openAiApiKey: string;\n  model?: RealtimeAPIModel;\n  debug?: boolean;\n}): RealtimeClient {\n  const params = new URLSearchParams({\n    call_type: options.call.type,\n    call_id: options.call.id,\n    api_key: options.streamApiKey,\n  });\n  const url = `${options.baseUrl.replace(\n    \"https://\",\n    \"wss://\"\n  )}/video/connect_agent?${params.toString()}`;\n  const client = new RealtimeClient({\n    url,\n    apiKey: options.openAiApiKey,\n    dangerouslyAllowAPIKeyInBrowser: true,\n    debug: options.debug ?? false,\n  });\n  (client.realtime as RealtimeProxyAPI).streamToken = options.streamUserToken;\n  (client.realtime as RealtimeProxyAPI).model = options.model;\n  patchRealtimeApi(client.realtime);\n  return client;\n}\n\n/**\n * Patches provided RealtimeAPI instance to work with Stream Node SDK and Edge network.\n * See comments marked \"PATCH\" for a list of changes in the original implementation.\n */\nfunction patchRealtimeApi(realtime: RealtimeAPI) {\n  realtime.connect = async function (\n    this: RealtimeProxyAPI,\n    { model }: { model?: string; } = {},\n  ): Promise<true> {\n    // PATCH: OpenAI Realtime API client incorrectly detects Node environments as browser\n    // if they implement WebSocket (which they do since Node 22). We fix it by overriding\n    // connect() method implementation.\n    if (this.isConnected()) {\n      throw new Error(`Already connected`);\n    }\n    // PATCH: RealtimeClient.connect() doesn't accept a `model` parameter.\n    // The RealtimeAPI though does accept it, so we are passing it down.\n    const modelToUse = model || this.model;\n    const ws = new WebSocket(`${this.url}${modelToUse ? `?model=${modelToUse}` : ''}`, [], {\n      finishRequest: (_request) => {\n        const request = _request as unknown as OutgoingMessage;\n        // Auth\n        request.setHeader(\"Authorization\", `Bearer ${this.apiKey}`);\n        request.setHeader(\"OpenAI-Beta\", \"realtime=v1\");\n        // PATCH: we add a header with Stream token.\n        request.setHeader(\"Stream-Authorization\", this.streamToken);\n        request.end();\n      },\n    });\n    return new Promise((resolve, reject) => {\n      ws.on(\"message\", (data) => {\n        const message = JSON.parse(data.toString());\n\n        // PATCH: we don't resolve connection until the first message arrives.\n        // We reject it if the first message is an error.\n        if (message.type === \"error\") {\n          this.disconnect(ws as any);\n          reject(message);\n        }\n\n        this.receive(message.type, message);\n        resolve(true);\n      });\n\n      const connectionErrorHandler = () => {\n        this.disconnect(ws as any);\n        reject(new Error(`Could not connect to \"${this.url}\"`));\n      };\n      ws.on(\"error\", connectionErrorHandler);\n      ws.on(\"open\", () => {\n        this.log(`Connected to \"${this.url}\"`);\n        ws.removeListener(\"error\", connectionErrorHandler);\n        ws.on(\"error\", () => {\n          this.disconnect(ws as any);\n          this.log(`Error, disconnected from \"${this.url}\"`);\n          this.dispatch(\"close\", { error: true });\n        });\n        ws.on(\"close\", () => {\n          this.disconnect(ws as any);\n          this.log(`Disconnected from \"${this.url}\"`);\n          this.dispatch(\"close\", { error: false });\n          // PATCH: we don't leave the promise pending if the connection closes\n          // before the first message arrived.\n          reject(new Error(\"Closed without any messages\"));\n        });\n        this.ws = ws;\n      });\n    });\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAiD;AAEjD,gBAA0B;AAcnB,SAAS,qBAAqB,SAQlB;AACjB,QAAM,SAAS,IAAI,gBAAgB;AAAA,IACjC,WAAW,QAAQ,KAAK;AAAA,IACxB,SAAS,QAAQ,KAAK;AAAA,IACtB,SAAS,QAAQ;AAAA,EACnB,CAAC;AACD,QAAM,MAAM,GAAG,QAAQ,QAAQ;AAAA,IAC7B;AAAA,IACA;AAAA,EACF,CAAC,wBAAwB,OAAO,SAAS,CAAC;AAC1C,QAAM,SAAS,IAAI,wCAAe;AAAA,IAChC;AAAA,IACA,QAAQ,QAAQ;AAAA,IAChB,iCAAiC;AAAA,IACjC,OAAO,QAAQ,SAAS;AAAA,EAC1B,CAAC;AACD,EAAC,OAAO,SAA8B,cAAc,QAAQ;AAC5D,EAAC,OAAO,SAA8B,QAAQ,QAAQ;AACtD,mBAAiB,OAAO,QAAQ;AAChC,SAAO;AACT;AAMA,SAAS,iBAAiB,UAAuB;AAC/C,WAAS,UAAU,eAEjB,EAAE,MAAM,IAAyB,CAAC,GACnB;AAIf,QAAI,KAAK,YAAY,GAAG;AACtB,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACrC;AAGA,UAAM,aAAa,SAAS,KAAK;AACjC,UAAM,KAAK,IAAI,oBAAU,GAAG,KAAK,GAAG,GAAG,aAAa,UAAU,UAAU,KAAK,EAAE,IAAI,CAAC,GAAG;AAAA,MACrF,eAAe,CAAC,aAAa;AAC3B,cAAM,UAAU;AAEhB,gBAAQ,UAAU,iBAAiB,UAAU,KAAK,MAAM,EAAE;AAC1D,gBAAQ,UAAU,eAAe,aAAa;AAE9C,gBAAQ,UAAU,wBAAwB,KAAK,WAAW;AAC1D,gBAAQ,IAAI;AAAA,MACd;AAAA,IACF,CAAC;AACD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,SAAG,GAAG,WAAW,CAAC,SAAS;AACzB,cAAM,UAAU,KAAK,MAAM,KAAK,SAAS,CAAC;AAI1C,YAAI,QAAQ,SAAS,SAAS;AAC5B,eAAK,WAAW,EAAS;AACzB,iBAAO,OAAO;AAAA,QAChB;AAEA,aAAK,QAAQ,QAAQ,MAAM,OAAO;AAClC,gBAAQ,IAAI;AAAA,MACd,CAAC;AAED,YAAM,yBAAyB,MAAM;AACnC,aAAK,WAAW,EAAS;AACzB,eAAO,IAAI,MAAM,yBAAyB,KAAK,GAAG,GAAG,CAAC;AAAA,MACxD;AACA,SAAG,GAAG,SAAS,sBAAsB;AACrC,SAAG,GAAG,QAAQ,MAAM;AAClB,aAAK,IAAI,iBAAiB,KAAK,GAAG,GAAG;AACrC,WAAG,eAAe,SAAS,sBAAsB;AACjD,WAAG,GAAG,SAAS,MAAM;AACnB,eAAK,WAAW,EAAS;AACzB,eAAK,IAAI,6BAA6B,KAAK,GAAG,GAAG;AACjD,eAAK,SAAS,SAAS,EAAE,OAAO,KAAK,CAAC;AAAA,QACxC,CAAC;AACD,WAAG,GAAG,SAAS,MAAM;AACnB,eAAK,WAAW,EAAS;AACzB,eAAK,IAAI,sBAAsB,KAAK,GAAG,GAAG;AAC1C,eAAK,SAAS,SAAS,EAAE,OAAO,MAAM,CAAC;AAGvC,iBAAO,IAAI,MAAM,6BAA6B,CAAC;AAAA,QACjD,CAAC;AACD,aAAK,KAAK;AAAA,MACZ,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": []
}
